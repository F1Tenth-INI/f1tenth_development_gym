library: 'TF'  # TF or Pytorch
modeling:
  # NET_NAME: 'Dense-64H1-128H2-64H3' # Dense/LSTM/Simple-RNN/GRU
  # NET_NAME: 'Dense-10IN-128H1-128H2-8OUT-0'
  NET_NAME: 'LSTM-16H1-32H2-16H3'
  # NET_NAME: 'LSTM-10IN-32H1-32H2-8OUT-0'
  # NET_NAME: 'Custom-ODE_module.py-STModel_high_mu'
paths:
  # PATH HAS TO END WITH A SOLIDUS ("/") CHARACTER
  PATH_TO_EXPERIMENT_FOLDERS: './SI_Toolkit_ASF/Experiments/'  # Path where the experiments data is stored
  path_to_experiment: '0_LSTM/'
  DATA_FOLDER: 'Recordings_preprocessed'


training_default:
  #### For training closed loop dynamics model:
  state_inputs: ['pose_x', 'pose_y', 'pose_theta_cos', 'pose_theta_sin', 'linear_vel_x', 'angular_vel_z', 'slip_angle', 'steering_angle' ]
  control_inputs: [ 'translational_control', 'angular_control' ]
  outputs: [ 'D_pose_theta_cos', 'D_pose_theta_sin', 'D_pose_x', 'D_pose_y', 'D_linear_vel_x', 'D_angular_vel_z', 'D_slip_angle','D_steering_angle' ]
  translation_invariant_variables: []
  setpoint_inputs: []

  #### For adaptive control with custom module
  # state_inputs: ['angular_vel_z', 'linear_vel_x', 'pose_theta', 'pose_theta_cos', 'pose_theta_sin', 'pose_x', 'pose_y', 'slip_angle', 'steering_angle' ]
  # control_inputs: [ 'translational_control', 'angular_control' ]
  # outputs: [ 'D_angular_vel_z', 'D_linear_vel_x', 'D_pose_theta', 'D_pose_theta_cos', 'D_pose_theta_sin', 'D_pose_x', 'D_pose_y', 'D_slip_angle','D_steering_angle' ]
  # translation_invariant_variables: []
  # setpoint_inputs: [] 

  ### For training open loop dynamics model:
  # inputs = ['position', 'positionD', 'angle_sin', 'angle_cos', 'angleD']
  # outputs = inputs_list

  ### For training RNN or Dense:
  #control_inputs: []
  #state_inputs: [
  #                  'LIDAR_0000', 'LIDAR_0001', 'LIDAR_0002', 'LIDAR_0003', 'LIDAR_0004', 'LIDAR_0005', 'LIDAR_0006', 'LIDAR_0007', 'LIDAR_0008',
  #                 'LIDAR_0009', 'LIDAR_0010', 'LIDAR_0011', 'LIDAR_0012', 'LIDAR_0013', 'LIDAR_0014', 'LIDAR_0015', 'LIDAR_0016', 'LIDAR_0017',
  #                 'LIDAR_0018', 'LIDAR_0019', 'LIDAR_0020', 'LIDAR_0021', 'LIDAR_0022', 'LIDAR_0023', 'LIDAR_0024', 'LIDAR_0025', 'LIDAR_0026',
  #                 'LIDAR_0027', 'LIDAR_0028', 'LIDAR_0029', 'LIDAR_0030', 'LIDAR_0031', 'LIDAR_0032', 'LIDAR_0033', 'LIDAR_0034', 'LIDAR_0035',
  #                 'LIDAR_0036', 'LIDAR_0037', 'LIDAR_0038', 'LIDAR_0039', 'LIDAR_0040', 'LIDAR_0041', 'LIDAR_0042', 'LIDAR_0043', 'LIDAR_0044',
  #                 'LIDAR_0045', 'LIDAR_0046', 'LIDAR_0047', 'LIDAR_0048', 'LIDAR_0049', 'LIDAR_0050', 'LIDAR_0051', 'LIDAR_0052', 'LIDAR_0053',
  #                 'LIDAR_0054', 'LIDAR_0055', 'LIDAR_0056', 'LIDAR_0057', 'LIDAR_0058', 'LIDAR_0059', 'LIDAR_0060', 'LIDAR_0061', 'LIDAR_0062',
  #                 'LIDAR_0063', 'LIDAR_0064', 'LIDAR_0065', 'LIDAR_0066', 'LIDAR_0067'
  #                 'WYPT_REL_X_00', 'WYPT_REL_X_01', 'WYPT_REL_X_02', 'WYPT_REL_X_03', 'WYPT_REL_X_04', 'WYPT_REL_X_05', 'WYPT_REL_X_06', 'WYPT_REL_X_07', 'WYPT_REL_X_08', 'WYPT_REL_X_09', 'WYPT_REL_X_10', 'WYPT_REL_X_11', 'WYPT_REL_X_12', 'WYPT_REL_X_13', 'WYPT_REL_X_14', 'WYPT_REL_X_15', 'WYPT_REL_X_16', 'WYPT_REL_X_17', 'WYPT_REL_X_18', 'WYPT_REL_X_19',
  #                 'WYPT_REL_Y_00', 'WYPT_REL_Y_01', 'WYPT_REL_Y_02', 'WYPT_REL_Y_03', 'WYPT_REL_Y_04', 'WYPT_REL_Y_05', 'WYPT_REL_Y_06', 'WYPT_REL_Y_07', 'WYPT_REL_Y_08', 'WYPT_REL_Y_09', 'WYPT_REL_Y_10', 'WYPT_REL_Y_11', 'WYPT_REL_Y_12', 'WYPT_REL_Y_13', 'WYPT_REL_Y_14', 'WYPT_REL_Y_15', 'WYPT_REL_Y_16', 'WYPT_REL_Y_17', 'WYPT_REL_Y_18', 'WYPT_REL_Y_19',
  #                 'angular_vel_z', 'linear_vel_x', 'pose_theta_cos', 'pose_theta_sin', 'pose_x', 'pose_y', 'slip_angle', 'steering_angle'
  #                     ]

  ### Default
  # state_inputs: []
  # control_inputs: [ 'WYPT_REL_X_00', 'WYPT_REL_X_01', 'WYPT_REL_X_02', 'WYPT_REL_X_03', 'WYPT_REL_X_04', 'WYPT_REL_X_05', 'WYPT_REL_X_06', 'WYPT_REL_X_07', 'WYPT_REL_X_08', 'WYPT_REL_X_09', 'WYPT_REL_X_10', 'WYPT_REL_X_11', 'WYPT_REL_X_12', 'WYPT_REL_X_13', 'WYPT_REL_X_14',
  #                   #'WYPT_REL_X_15', 'WYPT_REL_X_16', 'WYPT_REL_X_17', 'WYPT_REL_X_18', 'WYPT_REL_X_19',
  #                   'WYPT_REL_Y_00', 'WYPT_REL_Y_01', 'WYPT_REL_Y_02', 'WYPT_REL_Y_03', 'WYPT_REL_Y_04', 'WYPT_REL_Y_05', 'WYPT_REL_Y_06', 'WYPT_REL_Y_07', 'WYPT_REL_Y_08', 'WYPT_REL_Y_09', 'WYPT_REL_Y_10', 'WYPT_REL_Y_11', 'WYPT_REL_Y_12', 'WYPT_REL_Y_13', 'WYPT_REL_Y_14',
  #                   #'WYPT_REL_Y_15', 'WYPT_REL_Y_16', 'WYPT_REL_Y_17', 'WYPT_REL_Y_18', 'WYPT_REL_Y_19',
  #                   'WYPT_VX_00', 'WYPT_VX_01', 'WYPT_VX_02', 'WYPT_VX_03', 'WYPT_VX_04', 'WYPT_VX_05', 'WYPT_VX_06', 'WYPT_VX_07', 'WYPT_VX_08', 'WYPT_VX_09', 'WYPT_VX_10', 'WYPT_VX_11', 'WYPT_VX_12', 'WYPT_VX_13', 'WYPT_VX_14',
  #                   'angular_vel_z', 'linear_vel_x', 'slip_angle', 'steering_angle' ]

  #state_inputs: []
  #control_inputs: [ 'LIDAR_0000', 'LIDAR_0001', 'LIDAR_0002', 'LIDAR_0003', 'LIDAR_0004', 'LIDAR_0005', 'LIDAR_0006', 'LIDAR_0007', 'LIDAR_0008',
  #                  'LIDAR_0009', 'LIDAR_0010', 'LIDAR_0011', 'LIDAR_0012', 'LIDAR_0013', 'LIDAR_0014', 'LIDAR_0015', 'LIDAR_0016', 'LIDAR_0017',
  #                  'LIDAR_0018', 'LIDAR_0019', 'LIDAR_0020', 'LIDAR_0021', 'LIDAR_0022', 'LIDAR_0023', 'LIDAR_0024', 'LIDAR_0025', 'LIDAR_0026',
  #                  'LIDAR_0027', 'LIDAR_0028', 'LIDAR_0029', 'LIDAR_0030', 'LIDAR_0031', 'LIDAR_0032', 'LIDAR_0033', 'LIDAR_0034', 'LIDAR_0035',
  #                  'LIDAR_0036', 'LIDAR_0037', 'LIDAR_0038', 'LIDAR_0039', 'LIDAR_0040', 'LIDAR_0041', 'LIDAR_0042', 'LIDAR_0043',
  #                  'WYPT_REL_X_00', 'WYPT_REL_X_01', 'WYPT_REL_X_02', 'WYPT_REL_X_03', 'WYPT_REL_X_04', 'WYPT_REL_X_05', 'WYPT_REL_X_06', 'WYPT_REL_X_07', 'WYPT_REL_X_08', 'WYPT_REL_X_09', 'WYPT_REL_X_10', 'WYPT_REL_X_11', 'WYPT_REL_X_12', 'WYPT_REL_X_13', 'WYPT_REL_X_14',
  #                  'WYPT_REL_Y_00', 'WYPT_REL_Y_01', 'WYPT_REL_Y_02', 'WYPT_REL_Y_03', 'WYPT_REL_Y_04', 'WYPT_REL_Y_05', 'WYPT_REL_Y_06', 'WYPT_REL_Y_07', 'WYPT_REL_Y_08', 'WYPT_REL_Y_09', 'WYPT_REL_Y_10', 'WYPT_REL_Y_11', 'WYPT_REL_Y_12', 'WYPT_REL_Y_13', 'WYPT_REL_Y_14',
  #                  'WYPT_VX_00', 'WYPT_VX_01', 'WYPT_VX_02', 'WYPT_VX_03', 'WYPT_VX_04', 'WYPT_VX_05', 'WYPT_VX_06', 'WYPT_VX_07', 'WYPT_VX_08', 'WYPT_VX_09', 'WYPT_VX_10', 'WYPT_VX_11', 'WYPT_VX_12', 'WYPT_VX_13', 'WYPT_VX_14',
  #                  'angular_vel_z', 'linear_vel_x', 'slip_angle', 'steering_angle' ]
  # setpoint_inputs: []
  # outputs: ['translational_control_calculated', 'angular_control_calculated']

  #setpoint_inputs: []
  #outputs: ['translational_control_calculated', 'angular_control_calculated']

  EPOCHS: 25
  BATCH_SIZE: 8
  SEED: 1873
  LR: 1.0e-3
  WASH_OUT_LEN: 25
  POST_WASH_OUT_LEN: 1
  ON_FLY_DATA_GENERATION: False
  NORMALIZE: True
  SHIFT_LABELS: 1  # for k, as a label to row i is taken row i+k
  USE_NNI: False  # Decide if you want to use NNI package
  CONSTRUCT_NETWORK: 'with cells'  # Matters only for Pytorch

  REDUCE_LR_ON_PLATEAU:
    ACTIVATED: True
    FACTOR: 0.316  # Factor to reduce learning rate by (0.316 = sqrt(0.1))
    PATIENCE: 1
    MIN_LR: 1.0e-5
    MIN_DELTA: 0.00


  ### Lidar Data: from 0 to 1080 on 270 Degrees (4 ranges per degree). Example; scan exactly 180 Degrees by setting lower_bound=180 and upper_bound=900.
  # Depending on number of Lidar points listed in state input, an even distribution of input scans between the two bounds is selected and fed to the network.
  #ToDo instead of listing all Lidar Points, one just writes how many and the state input vector is generated automatically
  upper_bound: 880
  lower_bound: 200
