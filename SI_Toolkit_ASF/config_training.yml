library: "TF" # TF or Pytorch 
#!!!If using pytorch, in SI_toolkit/Functions/Pytorch/Training.py, remove verbose=True in line 68!!!

modeling:
  # NET_NAME: "GRU-128H1-128H2-128H3"
  NET_NAME: "Dense-32H1-64H2-128H3"

paths:
  # PATH HAS TO END WITH A SOLIDUS ("/") CHARACTER
  path_to_experiment: ""
  PATH_TO_EXPERIMENT_FOLDERS: "SI_Toolkit_ASF/Experiments/DNN_history/" # Path where the experiments data is stored
  DATA_FOLDER: "Recordings"

training_default:
  AUGMENT_DATA: False

  ## translation_invariant_variables: ['pose_x', 'pose_y']
  translation_invariant_variables: []

  # state_inputs: ["input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_10", "input_11", "input_12", "input_13", "input_14", "input_15", "input_16", "input_17", "input_20", "input_21", "input_22", "input_23", "input_24", "input_25", "input_26", "input_27", "input_30", "input_31", "input_32", "input_33", "input_34", "input_35", "input_36", "input_37", "input_40", "input_41", "input_42", "input_43", "input_44", "input_45", "input_46", "input_47", "input_50", "input_51", "input_52", "input_53", "input_54", "input_55", "input_56", "input_57", "input_60", "input_61", "input_62", "input_63", "input_64", "input_65", "input_66", "input_67", "input_70", "input_71", "input_72", "input_73", "input_74", "input_75", "input_76", "input_77"]

  state_inputs: ["angular_vel_z_1","linear_vel_x_1","linear_vel_y_1","pose_theta_1","pose_theta_cos_1","pose_theta_sin_1","steering_angle_1","angular_control_1","translational_control_1",
                "angular_vel_z_2","linear_vel_x_2","linear_vel_y_2","pose_theta_2","pose_theta_cos_2","pose_theta_sin_2","steering_angle_2","angular_control_2","translational_control_2",
                "angular_vel_z_3","linear_vel_x_3","linear_vel_y_3","pose_theta_3","pose_theta_cos_3","pose_theta_sin_3","steering_angle_3","angular_control_3","translational_control_3",
                "angular_vel_z_4","linear_vel_x_4","linear_vel_y_4","pose_theta_4","pose_theta_cos_4","pose_theta_sin_4","steering_angle_4","angular_control_4","translational_control_4",
                "angular_vel_z_5","linear_vel_x_5","linear_vel_y_5","pose_theta_5","pose_theta_cos_5","pose_theta_sin_5","steering_angle_5","angular_control_5","translational_control_5",
                "angular_vel_z_6","linear_vel_x_6","linear_vel_y_6","pose_theta_6","pose_theta_cos_6","pose_theta_sin_6","steering_angle_6","angular_control_6","translational_control_6",
                "angular_vel_z_7","linear_vel_x_7","linear_vel_y_7","pose_theta_7","pose_theta_cos_7","pose_theta_sin_7","steering_angle_7","angular_control_7","translational_control_7",
                "angular_vel_z_8","linear_vel_x_8","linear_vel_y_8","pose_theta_8","pose_theta_cos_8","pose_theta_sin_8","steering_angle_8",
  ]
  
  control_inputs: [
      "angular_control_8",
      "translational_control_8"
    ]

  

  # state_inputs: []
  # control_inputs: lidar_data + waypoints_x + waypoints_y + waypoints_vx + vel_and_angle

  setpoint_inputs: []
  outputs:
    ["err_x",
    "err_y",
    "err_angular_vel_z", 
    "err_linear_vel_x", 
    "err_linear_vel_y",
    "err_pose_theta",
    "err_pose_theta_cos",
    "err_pose_theta_sin",
    "err_steering_angle"
    ]
  
  EPOCHS: 50
  BATCH_SIZE: 32
  SEED: 1873
  LR:
    INITIAL: 1.0e-3
    REDUCE_LR_ON_PLATEAU: True
    ACTIVATED: True
    DECREASE_FACTOR: 0.316 # Factor to reduce learning rate by (0.316 = sqrt(0.1))
    PATIENCE: 1
    MINIMAL: 1.0e-5
    MIN_DELTA: 0.00
  VALIDATE_ALSO_ON_TRAINING_SET: False

  WASH_OUT_LEN: 0
  POST_WASH_OUT_LEN: 1
  ON_FLY_DATA_GENERATION: False
  NORMALIZE: True
  SHIFT_LABELS: 0 # for k, as a label to row i is taken row i+k
  USE_NNI: False # Decide if you want to use NNI package
  CONSTRUCT_NETWORK: "with cells" # Matters only for Pytorch

  ### Lidar Data: from 0 to 1080 on 270 Degrees (4 ranges per degree). Example; scan exactly 180 Degrees by setting lower_bound=180 and upper_bound=900.
  # Depending on number of Lidar points listed in state input, an even distribution of input scans between the two bounds is selected and fed to the network.
  #ToDo instead of listing all Lidar Points, one just writes how many and the state input vector is generated automatically
  upper_bound: 880
  lower_bound: 200
  PLOT_WEIGHTS_DISTRIBUTION: false # Calculate histograms of weights and biases and activations, take long time

training_nn_physical_model:
  #### For training closed loop dynamics model:
  state_inputs:
    [
      "pose_x",
      "pose_y",
      "pose_theta_cos",
      "pose_theta_sin",
      "linear_vel_x",
      "angular_vel_z",
      "slip_angle",
      "steering_angle",
    ]
  control_inputs: ["translational_control", "angular_control"]
  outputs:
    [
      "D_pose_theta_cos",
      "D_pose_theta_sin",
      "D_pose_x",
      "D_pose_y",
      "D_linear_vel_x",
      "D_angular_vel_z",
      "D_slip_angle",
      "D_steering_angle",
    ]
  translation_invariant_variables: []

  # Lidar data points (nr of points: 40)
  # lidar_data      : [ 'LIDAR_0040', 'LIDAR_0065', 'LIDAR_0090', 'LIDAR_0115', 'LIDAR_0140', 'LIDAR_0165', 'LIDAR_0190', 'LIDAR_0215', 'LIDAR_0240', 'LIDAR_0265', 'LIDAR_0290', 'LIDAR_0315',
  #                     'LIDAR_0340', 'LIDAR_0365', 'LIDAR_0390', 'LIDAR_0415', 'LIDAR_0440', 'LIDAR_0465', 'LIDAR_0490', 'LIDAR_0515', 'LIDAR_0540', 'LIDAR_0565', 'LIDAR_0590', 'LIDAR_0615',
  #                    'LIDAR_0640', 'LIDAR_0665', 'LIDAR_0690', 'LIDAR_0715', 'LIDAR_0740', 'LIDAR_0765', 'LIDAR_0790', 'LIDAR_0815', 'LIDAR_0840', 'LIDAR_0865', 'LIDAR_0890', 'LIDAR_0915', 'LIDAR_0940', 'LIDAR_0965', 'LIDAR_0990', 'LIDAR_1015' ]

  # waypoints_x     : [ 'WYPT_REL_X_00', 'WYPT_REL_X_01', 'WYPT_REL_X_02', 'WYPT_REL_X_03', 'WYPT_REL_X_04', 'WYPT_REL_X_05', 'WYPT_REL_X_06', 'WYPT_REL_X_07', 'WYPT_REL_X_08', 'WYPT_REL_X_09', 'WYPT_REL_X_10', 'WYPT_REL_X_11', 'WYPT_REL_X_12', 'WYPT_REL_X_13', 'WYPT_REL_X_14' ]
  # waypoints_y     : [ 'WYPT_REL_Y_00', 'WYPT_REL_Y_01', 'WYPT_REL_Y_02', 'WYPT_REL_Y_03', 'WYPT_REL_Y_04', 'WYPT_REL_Y_05', 'WYPT_REL_Y_06', 'WYPT_REL_Y_07', 'WYPT_REL_Y_08', 'WYPT_REL_Y_09', 'WYPT_REL_Y_10', 'WYPT_REL_Y_11', 'WYPT_REL_Y_12', 'WYPT_REL_Y_13', 'WYPT_REL_Y_14' ]
  # waypoints_vx    : [ 'WYPT_VX_00', 'WYPT_VX_01', 'WYPT_VX_02', 'WYPT_VX_03', 'WYPT_VX_04', 'WYPT_VX_05', 'WYPT_VX_06', 'WYPT_VX_07', 'WYPT_VX_08', 'WYPT_VX_09', 'WYPT_VX_10', 'WYPT_VX_11', 'WYPT_VX_12', 'WYPT_VX_13', 'WYPT_VX_14' ]
  # vel_and_angle   : [ 'angular_vel_z', 'linear_vel_x', 'slip_angle', 'steering_angle' ]

  ### For training open loop dynamics model:
  # inputs = ['position', 'positionD', 'angle_sin', 'angle_cos', 'angleD']
  # outputs = inputs_list

  state_inputs: []

  control_inputs: [
      # 'LIDAR_0040', 'LIDAR_0065', 'LIDAR_0090', 'LIDAR_0115', 'LIDAR_0140', 'LIDAR_0165', 'LIDAR_0190', 'LIDAR_0215', 'LIDAR_0240', 'LIDAR_0265', 'LIDAR_0290', 'LIDAR_0315',
      # 'LIDAR_0340', 'LIDAR_0365', 'LIDAR_0390', 'LIDAR_0415', 'LIDAR_0440', 'LIDAR_0465', 'LIDAR_0490', 'LIDAR_0515', 'LIDAR_0540', 'LIDAR_0565', 'LIDAR_0590', 'LIDAR_0615',
      # 'LIDAR_0640', 'LIDAR_0665', 'LIDAR_0690', 'LIDAR_0715', 'LIDAR_0740', 'LIDAR_0765', 'LIDAR_0790', 'LIDAR_0815', 'LIDAR_0840', 'LIDAR_0865', 'LIDAR_0890', 'LIDAR_0915', 'LIDAR_0940', 'LIDAR_0965', 'LIDAR_0990', 'LIDAR_1015',
      "WYPT_REL_X_00", "WYPT_REL_X_01", "WYPT_REL_X_02", "WYPT_REL_X_03", "WYPT_REL_X_04", "WYPT_REL_X_05", "WYPT_REL_X_06", "WYPT_REL_X_07", "WYPT_REL_X_08", "WYPT_REL_X_09", "WYPT_REL_X_10", "WYPT_REL_X_11", "WYPT_REL_X_12", "WYPT_REL_X_13", "WYPT_REL_X_14",
      "WYPT_REL_Y_00", "WYPT_REL_Y_01", "WYPT_REL_Y_02", "WYPT_REL_Y_03", "WYPT_REL_Y_04", "WYPT_REL_Y_05", "WYPT_REL_Y_06", "WYPT_REL_Y_07", "WYPT_REL_Y_08", "WYPT_REL_Y_09", "WYPT_REL_Y_10", "WYPT_REL_Y_11", "WYPT_REL_Y_12", "WYPT_REL_Y_13", "WYPT_REL_Y_14",
      "WYPT_VX_00", "WYPT_VX_01", "WYPT_VX_02", "WYPT_VX_03", "WYPT_VX_04", "WYPT_VX_05", "WYPT_VX_06", "WYPT_VX_07", "WYPT_VX_08", "WYPT_VX_09", "WYPT_VX_10", "WYPT_VX_11", "WYPT_VX_12", "WYPT_VX_13", "WYPT_VX_14",
      # 'v_y',
      'angular_vel_z',
      'linear_vel_x',
      # 'slip_angle',
      'steering_angle'
    ]

  # state_inputs: []
  # control_inputs: lidar_data + waypoints_x + waypoints_y + waypoints_vx + vel_and_angle

  setpoint_inputs: []
  outputs: ["angular_control_calculated", "translational_control_calculated"] # "mu"

  EPOCHS: 5
  BATCH_SIZE: 8
  SEED: 1873
  LR:
    INITIAL: 1.0e-3
    REDUCE_LR_ON_PLATEAU: True
    ACTIVATED: True
    DECREASE_FACTOR: 0.316 # Factor to reduce learning rate by (0.316 = sqrt(0.1))
    PATIENCE: 1
    MINIMAL: 1.0e-5
    MIN_DELTA: 0.00
  VALIDATE_ALSO_ON_TRAINING_SET: False

  WASH_OUT_LEN: 20
  POST_WASH_OUT_LEN: 1
  ON_FLY_DATA_GENERATION: False
  NORMALIZE: True
  SHIFT_LABELS: 4 # for k, as a label to row i is taken row i+k
  USE_NNI: False # Decide if you want to use NNI package
  CONSTRUCT_NETWORK: "with cells" # Matters only for Pytorch

  REDUCE_LR_ON_PLATEAU:
    ACTIVATED: True
    FACTOR: 0.316 # Factor to reduce learning rate by (0.316 = sqrt(0.1))
    PATIENCE: 1
    MIN_LR: 1.0e-5
    MIN_DELTA: 0.00

  ### Lidar Data: from 0 to 1080 on 270 Degrees (4 ranges per degree). Example; scan exactly 180 Degrees by setting lower_bound=180 and upper_bound=900.
  # Depending on number of Lidar points listed in state input, an even distribution of input scans between the two bounds is selected and fed to the network.
  #ToDo instead of listing all Lidar Points, one just writes how many and the state input vector is generated automatically
  upper_bound: 880
  lower_bound: 200

REGULARIZATION:
  ACTIVATED: False
QUANTIZATION: # Not implemented yet
  ACTIVATED: False
  ACTIVATION:
    bits: 6
  KERNEL:
    bits: 11
    integer: 6
    symmetric: True
  BIAS:
    bits: 11
    integer: 6
    symmetric: True
  RECURRENT:
    bits: 11
    integer: 6
    symmetric: True
PRUNING: # TF only for the moment
  ACTIVATED: False
  PRUNING_PARAMS:
    PRUNING_SCHEDULE: "CONSTANT_SPARSITY"
  PRUNING_SCHEDULES:
    CONSTANT_SPARSITY:
      target_sparsity: 0.75
      begin_step_in_epochs: 1.0 # fraction of epoch allowed
      end_step_in_training_fraction: 1.0
      frequency_per_epoch: 100.0 # fraction of epoch allowed
    POLYNOMIAL_DECAY:
      initial_sparsity: 0.0
      final_sparsity: 0.75
      begin_step_in_epochs: 1.0 # fraction of epoch allowed
      end_step_in_training_fraction: 0.8
      power: 3.0
      frequency_per_epoch: 1000 # fraction of epoch allowed

FILTERS: False

CONFIG_SERIES_MODIFICATION: False