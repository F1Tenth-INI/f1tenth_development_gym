library: 'TF'  # TF or Pytorch
modeling:
  NET_NAME: 'Dense-63IN-64H1-64H2-2OUT-1'
paths:
  # PATH HAS TO END WITH A SOLIDUS ("/") CHARACTER
  path_to_experiment: ''
  PATH_TO_EXPERIMENT_FOLDERS: './SI_Toolkit_ASF/Experiments/flo-dataset/'  # Path where the experiments data is stored
  DATA_FOLDER:                  'Recordings'                        # Folder within path_to_experiment where the experimental data is stored


training_default:
  #### For training closed loop dynamics model:
  #state_inputs: ['pose_theta_cos', 'pose_theta_sin', 'pose_x', 'pose_y', 'linear_vel_x', 'angular_vel_z','slip_angle','steering_angle']
  #control_inputs: ['translational_control', 'angular_control']
  #setpoint_inputs: []
  #outputs: ['pose_theta_cos', 'pose_theta_sin', 'pose_x', 'pose_y', 'linear_vel_x', 'angular_vel_z', 'slip_angle','steering_angle']
  ## translation_invariant_variables: ['pose_x', 'pose_y']
  translation_invariant_variables: []

  # Lidar data points (nr of points: 40)
  # lidar_data      : [ 'LIDAR_0040', 'LIDAR_0065', 'LIDAR_0090', 'LIDAR_0115', 'LIDAR_0140', 'LIDAR_0165', 'LIDAR_0190', 'LIDAR_0215', 'LIDAR_0240', 'LIDAR_0265', 'LIDAR_0290', 'LIDAR_0315',
  #                     'LIDAR_0340', 'LIDAR_0365', 'LIDAR_0390', 'LIDAR_0415', 'LIDAR_0440', 'LIDAR_0465', 'LIDAR_0490', 'LIDAR_0515', 'LIDAR_0540', 'LIDAR_0565', 'LIDAR_0590', 'LIDAR_0615',
  #                    'LIDAR_0640', 'LIDAR_0665', 'LIDAR_0690', 'LIDAR_0715', 'LIDAR_0740', 'LIDAR_0765', 'LIDAR_0790', 'LIDAR_0815', 'LIDAR_0840', 'LIDAR_0865', 'LIDAR_0890', 'LIDAR_0915', 'LIDAR_0940', 'LIDAR_0965', 'LIDAR_0990', 'LIDAR_1015' ]

  # waypoints_x     : [ 'WYPT_REL_X_00', 'WYPT_REL_X_01', 'WYPT_REL_X_02', 'WYPT_REL_X_03', 'WYPT_REL_X_04', 'WYPT_REL_X_05', 'WYPT_REL_X_06', 'WYPT_REL_X_07', 'WYPT_REL_X_08', 'WYPT_REL_X_09', 'WYPT_REL_X_10', 'WYPT_REL_X_11', 'WYPT_REL_X_12', 'WYPT_REL_X_13', 'WYPT_REL_X_14' ]
  # waypoints_y     : [ 'WYPT_REL_Y_00', 'WYPT_REL_Y_01', 'WYPT_REL_Y_02', 'WYPT_REL_Y_03', 'WYPT_REL_Y_04', 'WYPT_REL_Y_05', 'WYPT_REL_Y_06', 'WYPT_REL_Y_07', 'WYPT_REL_Y_08', 'WYPT_REL_Y_09', 'WYPT_REL_Y_10', 'WYPT_REL_Y_11', 'WYPT_REL_Y_12', 'WYPT_REL_Y_13', 'WYPT_REL_Y_14' ]
  # waypoints_vx    : [ 'WYPT_VX_00', 'WYPT_VX_01', 'WYPT_VX_02', 'WYPT_VX_03', 'WYPT_VX_04', 'WYPT_VX_05', 'WYPT_VX_06', 'WYPT_VX_07', 'WYPT_VX_08', 'WYPT_VX_09', 'WYPT_VX_10', 'WYPT_VX_11', 'WYPT_VX_12', 'WYPT_VX_13', 'WYPT_VX_14' ]
  # vel_and_angle   : [ 'angular_vel_z', 'linear_vel_x', 'slip_angle', 'steering_angle' ]

  ### For training open loop dynamics model:
  # inputs = ['position', 'positionD', 'angle_sin', 'angle_cos', 'angleD']
  # outputs = inputs_list

  state_inputs: []

  control_inputs: [
                    # 'LIDAR_0040', 'LIDAR_0065', 'LIDAR_0090', 'LIDAR_0115', 'LIDAR_0140', 'LIDAR_0165', 'LIDAR_0190', 'LIDAR_0215', 'LIDAR_0240', 'LIDAR_0265', 'LIDAR_0290', 'LIDAR_0315',
                    # 'LIDAR_0340', 'LIDAR_0365', 'LIDAR_0390', 'LIDAR_0415', 'LIDAR_0440', 'LIDAR_0465', 'LIDAR_0490', 'LIDAR_0515', 'LIDAR_0540', 'LIDAR_0565', 'LIDAR_0590', 'LIDAR_0615',
                    # 'LIDAR_0640', 'LIDAR_0665', 'LIDAR_0690', 'LIDAR_0715', 'LIDAR_0740', 'LIDAR_0765', 'LIDAR_0790', 'LIDAR_0815', 'LIDAR_0840', 'LIDAR_0865', 'LIDAR_0890', 'LIDAR_0915', 'LIDAR_0940', 'LIDAR_0965', 'LIDAR_0990', 'LIDAR_1015',
                    'WYPT_REL_X_00', 'WYPT_REL_X_01', 'WYPT_REL_X_02', 'WYPT_REL_X_03', 'WYPT_REL_X_04', 'WYPT_REL_X_05', 'WYPT_REL_X_06', 'WYPT_REL_X_07', 'WYPT_REL_X_08', 'WYPT_REL_X_09', 'WYPT_REL_X_10', 'WYPT_REL_X_11', 'WYPT_REL_X_12', 'WYPT_REL_X_13', 'WYPT_REL_X_14', 'WYPT_REL_X_15', 'WYPT_REL_X_16', 'WYPT_REL_X_17', 'WYPT_REL_X_18', 'WYPT_REL_X_19',
                    'WYPT_REL_Y_00', 'WYPT_REL_Y_01', 'WYPT_REL_Y_02', 'WYPT_REL_Y_03', 'WYPT_REL_Y_04', 'WYPT_REL_Y_05', 'WYPT_REL_Y_06', 'WYPT_REL_Y_07', 'WYPT_REL_Y_08', 'WYPT_REL_Y_09', 'WYPT_REL_Y_10', 'WYPT_REL_Y_11', 'WYPT_REL_Y_12', 'WYPT_REL_Y_13', 'WYPT_REL_Y_14', 'WYPT_REL_Y_15', 'WYPT_REL_Y_16', 'WYPT_REL_Y_17', 'WYPT_REL_Y_18', 'WYPT_REL_Y_19',
                    'WYPT_VX_00', 'WYPT_VX_01', 'WYPT_VX_02', 'WYPT_VX_03', 'WYPT_VX_04', 'WYPT_VX_05', 'WYPT_VX_06', 'WYPT_VX_07', 'WYPT_VX_08', 'WYPT_VX_09', 'WYPT_VX_10', 'WYPT_VX_11', 'WYPT_VX_12', 'WYPT_VX_13', 'WYPT_VX_14', 'WYPT_VX_15', 'WYPT_VX_16', 'WYPT_VX_17', 'WYPT_VX_18', 'WYPT_VX_19',
                    'angular_vel_z',
                    'linear_vel_x',
                    # 'slip_angle',
                    'steering_angle',
                    # 'ch_a_1','ch_a_2','ch_a_3','ch_a_4','ch_a_5','ch_a_6','ch_a_7','ch_a_8','ch_a_9',
                    # 'ch_t_1','ch_t_2','ch_t_3','ch_t_4','ch_t_5','ch_t_6','ch_t_7','ch_t_8','ch_t_9',
                     ]


  # state_inputs: []
  # control_inputs: lidar_data + waypoints_x + waypoints_y + waypoints_vx + vel_and_angle


  setpoint_inputs: []
  outputs: [ 'cs_a_4', 'cs_t_4']

  EPOCHS: 15
  BATCH_SIZE: 16
  SEED: 1873
  LR:
    INITIAL: 1.0e-3
    REDUCE_LR_ON_PLATEAU: True
    MINIMAL: 1.0e-6
    PATIENCE: 1
    DECREASE_FACTOR: 0.2 # sqrt(0.1)
    MIN_DELTA: 1.0e-4
  WASH_OUT_LEN: 0
  POST_WASH_OUT_LEN: 1
  ON_FLY_DATA_GENERATION: False
  NORMALIZE: True
  SHIFT_LABELS: 0  # for k, as a label to row i is taken row i+k
  USE_NNI: False  # Decide if you want to use NNI package
  CONSTRUCT_NETWORK: 'with cells'  # Matters only for Pytorch
  VALIDATE_ALSO_ON_TRAINING_SET: false
  PLOT_WEIGHTS_DISTRIBUTION: true # Calculate histograms of weights and biases and activations, take long time


  ### Lidar Data: from 0 to 1080 on 270 Degrees (4 ranges per degree). Example; scan exactly 180 Degrees by setting lower_bound=180 and upper_bound=900.
  # Depending on number of Lidar points listed in state input, an even distribution of input scans between the two bounds is selected and fed to the network.
  #ToDo instead of listing all Lidar Points, one just writes how many and the state input vector is generated automatically
  upper_bound: 880
  lower_bound: 200
REGULARIZATION:   # Implemented only for TF, no regularization for Pytorch
  ACTIVATED: false
  KERNEL:  # For all layers
    l1: 0.001
    l2: 0.00
  BIAS:  # For all layers
    l1: 0.001
    l2: 0.00
  ACTIVITY:  # Not for last layer, this has activity regularization set to 0
    l1: 0.00
    l2: 0.00


QUANTIZATION: # Not implemented yet
  ACTIVATED: false
  ACTIVATION:
    bits: 6
  KERNEL:
    bits: 11
    integer: 6
    symmetric: True
  BIAS:
    bits: 11
    integer: 6
    symmetric: True
  RECURRENT:
    bits: 11
    integer: 6
    symmetric: True

PRUNING: # TF only for the moment
  ACTIVATED: true
  PRUNING_PARAMS:
    PRUNING_SCHEDULE: 'CONSTANT_SPARSITY'
  PRUNING_SCHEDULES:
    CONSTANT_SPARSITY:
      target_sparsity: 0.805
      target_sparsity_last_layer: 0.65
      begin_step_in_epochs: 1.0  # fraction of epoch allowed
      end_step_in_training_fraction: 1.0
      frequency_per_epoch: 100.0 # fraction of epoch allowed
    POLYNOMIAL_DECAY:
      initial_sparsity: 0.5
      final_sparsity: 0.985
      final_sparsity_last_layer: 0.985
      begin_step_in_epochs: 1.0  # fraction of epoch allowed
      end_step_in_training_fraction: 0.8
      power: 3.0
      frequency_per_epoch: 100 # fraction of epoch allowed